<template>
  <view class="everyday-modal-container" wx:if="{{ show }}">
    <view class="everyday-close" @tap="handleClose"/>
    <view class="everyday-section">
      <view class="everyday-pic">
        <drawimage wx:if="{{everydayCanvas.background.imageResource}}" bind:toTempFile="handleToTempFile"
                   class="everyday-pic" id="{{everydayCanvas.canvasId}}" width="{{everydayCanvas.width}}"
                   height="{{everydayCanvas.height}}" background="{{everydayCanvas.background}}"
                   layers="{{everydayCanvas.layers}}"/>
      </view>
      <view class="everyday-banner"></view>
      <view class="everyday-btns">
        <button hover-class="none" class="everyday-btn friend" @tap="handleShareFriend">
          <view class="text">分享给好友</view>
        </button>
        <button wx:if="{{isOpenWritePhotosAlbum}}" hover-class="none" class="everyday-btn moments"
                @tap="handleShareMomentsSetting">
          <view class="text">分享朋友圈</view>
        </button>
        <button wx:else hover-class="none" class="everyday-btn moments"
                @tap="handleShareMoments">
          <view class="text">分享朋友圈</view>
        </button>
      </view>
    </view>
  </view>
</template>

<script>
  /**
   * @desc 每日一言弹窗
   */
  import wepy from 'wepy';
  import { getUid, SendClickLog } from '../utils/maidian';
  import { get } from '../utils/ajax';
  import { getTmpFilePath, toast } from '../utils/index';

  export default class EverydayModal extends wepy.component {
    props = {
        show: {
            type: Boolean,
            default: false,
            twoWay: true,
        },
        unread: {
            type: Boolean,
            default: true,
            twoWay: true,
        },
    };

    data = {
        isOpenWritePhotosAlbum: false,
        // 背景图片
        everydayBgPic: '',
        // 开始时间
        everydayStartTime: '',
        // 名片二维码
        cardQrPic: '',
        everydayCanvas: {
            canvasId: 'everyday-canvas',
            width: 450, // 450 750
            height: 800, // 800 1334
            imageUrl: '',
            background: {
                imageResource: '',
                dx: 0,
                dy: 0,
                dWidth: 450,
                dHeight: 800,
            },
            layers: [
                {
                    type: 'image',
                    imageResource: '',
                    dx: 177, // 295
                    dy: 621, // 1034
                    dWidth: 96, // 160
                    dHeight: 96, // 160
                },
            ],
        },
    };

    watch = {
        show(newValue) {
            const seft = this;
            if (newValue) {
                seft.initEverydayDay();
            }
        },
    };

    async onLoad() {
        const seft = this;
        await seft.requestDayBgPic();
        // 是否未读
        const everydayUnread = wepy.getStorageSync('everydayUnread');
        if (everydayUnread && everydayUnread.data) {
            if (!seft.isToday(everydayUnread.data)) {
                seft.unread = true;
                wepy.removeStorageSync('everydayUnread');
            }
        } else {
            seft.unread = true;
        }
        seft.$apply();
    }

    isToday(dateStr) {
        const d = new Date(dateStr.replace(/-/g, '/'));
        const todaysDate = new Date();
        if (d.setHours(0, 0, 0, 0) === todaysDate.setHours(0, 0, 0, 0)) {
            return true;
        }
        return false;
    }

    getCuttentDateFormat() {
        const date = new Date();
        const [y, m, d, hh, mm, ss] = [date.getFullYear(), date.getMonth() + 1, date.getDate(), date.getHours(), date.getMinutes(), date.getSeconds()];
        const dateS = `${y}-${m < 10 ? `0${m}` : m}-${d < 10 ? `0${d}` : d} ${hh < 10 ? `0${hh}` : hh}:${mm < 10 ? `0${mm}` : mm}:${ss < 10 ? `0${ss}` : ss}`;
        return dateS;
    }

    methods = {
        // 关闭弹窗
        handleClose() {
            const seft = this;
            seft.show = false;
            seft.$apply();
            seft.trackClickLog('close');
        },
        // 分享好友
        handleShareFriend() {
            const seft = this;
            toast('长按图片发送给好友');
            const path = seft.everydayCanvas.imageUrl;
            wx.previewImage({
                urls: [path],
            });
            seft.trackClickLog('sharefriend');
        },

        // 分享朋友圈 下载名片
        async handleShareMoments() {
            const seft = this;
            seft.actionSaveImageToAlbum();
            seft.trackClickLog('sharemoments');
        },
        // 分享朋友圈 下载名片
        async handleShareMomentsSetting() {
            const seft = this;
            try {
                const res = await wepy.openSetting();
                if (res && res.authSetting['scope.writePhotosAlbum'] === true) {
                    seft.isOpenWritePhotosAlbum = false;
                    seft.$apply();
                    seft.actionSaveImageToAlbum();
                } else {
                    toast('您还未授权，图片无法保存到相册');
                }
            } catch (e) {
                toast('授权失败，图片无法保存到相册，请稍后再试！');
                console.log(e);
            }
        },
        handleToTempFile(e) {
            const seft = this;
            const { tempFilePath } = e.detail;
            seft.everydayCanvas.imageUrl = tempFilePath;
            seft.$apply();
        },
    };

    async initEverydayDay() {
        const seft = this;
        if (!(seft.data.everydayCanvas.layers[0] && seft.data.everydayCanvas.layers[0].imageResource)) {
            await seft.requestCardQrPic();
        }
        if (seft.data.everydayBgPic && seft.data.cardQrPic) {
            await seft.initDrawData();
            if (seft.unread) {
                seft.unread = false;
                const dateS = seft.getCuttentDateFormat();
                wepy.setStorageSync('everydayUnread', { date: dateS, show: false });
            }
        } else {
            seft.show = false;
            seft.$apply();
        }
    }

    async actionSaveImageToAlbum() {
        const seft = this;
        const path = seft.everydayCanvas.imageUrl;
        if (!path) {
            return;
        }

        // const res = await wepy.getSetting();
        // console.log('每日一言 actionSaveImageToAlbum=========>', res);
        wx.saveImageToPhotosAlbum({
            filePath: path,
            success() {
                toast('图片已保存到相册，可将图片分享到朋友圈');
                seft.show = false;
                seft.$apply();
            },
            fail(err) {
                console.log('handleShareMoments=========>', err);
                const authFail = ['saveImageToPhotosAlbum:fail auth deny', 'saveImageToPhotosAlbum:fail:auth denied'];
                if (authFail.indexOf(err.errMsg) > -1) {
                    toast('您拒绝了授权，图片无法保存到相册');
                    seft.isOpenWritePhotosAlbum = true;
                    seft.$apply();
                }
            },
        });
    }

    async initDrawData() {
        const seft = this;
        const { everydayBgPic, cardQrPic } = seft.data;
        seft.everydayCanvas.background.imageResource = everydayBgPic;
        if (cardQrPic) {
            seft.everydayCanvas.layers = [
                {
                    type: 'image', // 名片二维码
                    imageResource: cardQrPic,
                    dx: 177, // 295
                    dy: 621, // 1034
                    dWidth: 96, // 160
                    dHeight: 96, // 160
                },
            ];
        } else {
            seft.everydayCanvas.layers = [];
        }
        seft.$apply();
        console.log('===========》每日一言 initDrawData', 'seft.everydayCanvas=', seft.everydayCanvas);
    }

    async requestDayBgPic() {
        const seft = this;
        try {
            const { data } = await get('/dayPic/get', {});
            if (data && data.picUrl) {
                const dayBgPic = `${data.picUrl.indexOf('http') === -1 ? 'https://pic1.58cdn.com.cn' : ''}${data.picUrl}`;
                const startTime = `${data.startTime ? data.startTime : ''}`; // 2018-11-02 10:01:00
                seft.everydayBgPic = await getTmpFilePath(dayBgPic);
                seft.everydayStartTime = startTime;
                seft.$apply();
            }
        } catch (error) {
            console.log(error);
        }
    }

    async requestCardQrPic() {
        const seft = this;
        const cardId = wepy.getStorageSync('current_cardId');
        if (cardId) {
            try {
                const { data } = await get('/share', {
                    path: 'pages/index58/index58',
                    sceneId: `card_${cardId}`,
                    cardId,
                });
                const { url = '' } = data;
                if (url) {
                    seft.cardQrPic = await getTmpFilePath(url);
                    seft.$apply();
                }
            } catch (err) {
                console.log(err);
            }
        }
    }

    trackClickLog(clickLog) {
        if (clickLog) {
            SendClickLog('wxf03e52adc4b13448', getUid(), '{}', `sjzh_click_everyday_${clickLog}`);
        }
    }
  }
</script>
