<template>
    <view class="container">
        <view class="tabs-wrap">
            <view wx:for="{{ tabbarItems }}"
            wx:key="name"
            class="tab-box"
            :class="{ selected: curTab === item.name }"
            @tap="selectTab({{ item.name }})">{{ item.label }}</view>
        </view>

        <view class="work-list" wx:if="{{ curTab === 'image' || curTab === 'video' }}">
            <view class="content">
                <view class="work-box" wx:for="{{ works }}" wx:key="id">
                    <image
                    class="item"
                    mode="aspectFill"
                    src="{{ item.resourceUrl }}"
                    @tap="previewResource({{ item.previewUrl }})"></image>
                    <view class="work-mask"
                    :class="{ checked: item.checked }"
                    wx:if="{{ isEditing }}"
                    @tap.stop="selectItem({{ item.id }}, {{ index }})"></view>
                </view>
            </view>
        </view>
        <view class="group-list article-group-list {{isEditing ? 'edit' : ''}}" wx:if="{{groupList.length > 0}}">
            <view class="group-item article-group-item" bindtap="editChose" wx:for="{{groupList}}" wx:key="index" data-item="{{item}}">
                <view class="group-line article-group-line selected">
                    <view class="group-name article-group-name">{{item.name}}</view>
                    <view class="group-size article-group-size">(13)</view>
                    <view class="group-angel article-group-angel" wx:if="{{!isEditing}}"></view>
                    <view class="rename-btn article-rename-btn" wx:if="{{isEditing}}">重命名</view>
                </view>
            </view>
        </view>
        <EmptyPage wx:if="{{groupList.length === 0}}"></EmptyPage>
        <view class="options">
            <button class="button edit" @tap="edit" wx:if="{{groupList.length > 0 || works.length > 0}}">{{ isEditing ? '取消' : '编辑' }}</button>
            <button class="button" wx:if="{{ isEditing }}" @tap="deleteItem">删除</button>
            <button class="button" wx:else @tap="uploadFile({{ curTab }})">{{ optionNames[curTab] }}</button>
        </view>
        <Pop wx:if="{{showPop}}" @close.user="close" @addGroup.user="addGroup"></Pop>
    </view>
</template>

<script>
import wepy from 'wepy';
import { LOAD_RESOURCE_URL, DELETE_RESOURCE, SAVE_RESOURCE_URL } from '../utils/url';
import { get } from '../utils/ajax';
import { toast, alert, picSrcDomain, sleep } from '../utils';
import uploader from '../utils/uploaderP';
import EmptyPage from '../components/EmptyPage';
import Pop from '../components/Dialog';

let pageNum = 1;
const pageSize = 20;
let urls = [];
let selectedIds = []; // 已选择作品

export default class Index extends wepy.page {
    config = {
        navigationBarTitleText: '素材管理',
    }

    components = {
        EmptyPage,
        Pop,
    }
    data = {
        curTab: 'article',
        tabbarItems: [
            {
                label: '图片',
                name: 'image',
            },
            {
                label: '视频',
                name: 'video',
            },
            {
                label: '文章',
                name: 'article',
            },
        ],
        // 按钮文字
        optionNames: {
            image: '上传图片',
            video: '上传视频',
            article: '添加文章分组',
        },
        // 展示时用的works
        works: [],
        groupList: [],
        title: '没有文章分组~',
        isEditing: false,
        showPop: false,
    }

    async onLoad() {
        await this.loadData(this.curTab);
    }

    methods = {
        selectTab(name) {
            this.initData();

            this.curTab = name;
            this.loadData(name);
        },

        /**
         * 选择作品
         * id用于删除作品
         * index用于找到作品，标记check
         */
        selectItem(id, index) {
            if (selectedIds.length >= 10) {
                alert('一次只能删除10条素材！');
                return;
            }

            const { works } = this;
            const work = works[index];

            if (work) {
                work.checked = !work.checked;
                selectedIds.push(id);
            }
        },

        previewResource(url) {
            if (this.curTab === 'image') {
                wx.previewImage({
                    current: url,
                    urls,
                });
            }

            if (this.curTab === 'video') {
                wx.navigateTo({
                    url: `/pages/VideoPlay?url=${url}`,
                });
            }
        },

        edit() {
            selectedIds = [];
            this.isEditing = !this.isEditing;
        },

        /**
         * 删除作品
         * 批量删除，通过Promise.all实现，目前无批量删除接口
         */
        async deleteItem() {
            try {
                await Promise.all(selectedIds.map(id => get(DELETE_RESOURCE + id)));

                toast('删除成功！');
                this.isEditing = false;
                this.$apply();

                this.initData();
                this.loadData(this.curTab);
            } catch (e) {
                this.errorHandler(e);
                toast('删除失败！');
            }
        },

        /**
         * 上传素材
         */
        async uploadFile(type) {
            switch (type) {
                case 'image':
                    await this.uploadImage();
                    break;

                case 'video':
                    await this.uploadVideo();
                    // 上传图片延迟2秒刷新，配合toast的2秒延迟
                    await sleep(2000);
                    break;

                case 'article':
                    await this.showDialog();
                    break;

                default:
                    break;
            }

            this.initData();
            this.loadData(this.curTab);
        },
        async addGroup(content) {
            await get('/businessArticle/addgroup', {
                name: content,
            });
            this.showPop = false;
            this.$apply();
            toast('添加成功！');
            this.loadData(this.curTab);
        },
        close() {
            this.showPop = false;
            this.$apply();
        },
        editChose(e) {
            const { id } = e.currentTarget.dataset.item;
            if (this.isEditing) {
                const selArr = selectedIds;
                const dataList = this.listData;
                const index = selectedIds.length === 0 ? -2 : selectedIds.indexOf(id);
                if (index < 0) {
                    selArr.push(id);
                    dataList.forEach(item => {
                        if (item.id === id) {
                            Object.assign(item, {
                                choseStatu: true,
                            });
                        }
                    });
                } else {
                    dataList.forEach(item => {
                        if (item.id === id) {
                            Object.assign(item, {
                                choseStatu: false,
                            });
                        }
                    });
                    selArr.splice(index, 1);
                }
                this.listData = dataList;
                selectedIds = selArr;
                this.$apply();
                return;
            }
            // 点击跳转文章详情页面
            wepy.navigateTo({
                url: `articleComponentlist?id=${id}`,
            });
        },
    }

    initData() {
        // 初始化数据
        this.works = [];
        this.$apply();
        pageNum = 1;
        urls = [];
        selectedIds = [];
    }

    async loadData(type) {
        let resourceType = 1;

        switch (type) {
            case 'image':
            case 'video':
                resourceType = ({
                    image: 1,
                    video: 2,
                })[type];
                await this.loadResource(resourceType);
                break;

            case 'article':
                await this.loadArticle();
                break;

            default:
                break;
        }
    }

    async loadResource(resourceType) {
        const postData = {
            resourceType,
        };

        Object.assign(postData, {
            pageNum,
            pageSize,
        });
        pageNum += 1;

        try {
            const { data } = await get(LOAD_RESOURCE_URL, postData);
            if (!data || !data.length) {
                toast('已经到底了');
            }

            data.forEach(item => {
                const workItem = Object.assign({}, item);

                // 加载图片，url加上宽度，加上前置域名
                if (resourceType === 1) {
                    workItem.previewUrl = `${picSrcDomain()}${workItem.resourceUrl}?w=375`; // 预览图片
                    workItem.resourceUrl = `${picSrcDomain()}${workItem.resourceUrl}?w=100`;
                }

                // 加载视频
                if (resourceType === 2) {
                    workItem.previewUrl = workItem.resourceUrl;
                    let resourceUrl = '';

                    // 在这里添加try catch是有必要的，若不添加，报错了会终止循环
                    try {
                        const extend = JSON.parse(workItem.extend);
                        resourceUrl = `${extend.sourceCoverUrl}?w=100`; // 封面图片
                    } catch (e) {
                        this.errorHandler(e);
                    }

                    workItem.resourceUrl = resourceUrl;
                }

                this.works.push(workItem);
                urls.push(workItem.previewUrl);
            });
            this.$apply();
        } catch (e) {
            this.errorHandler(e);
        }
    }

    async loadArticle() {
        // const { data } = get('/businessArticle/groups');
        // if (!data && data.length === 0) return;
        // data.forEach(item => {
        //     Object.assign(item, {
        //         choseStatu: false,
        //     });
        // });
        // this.groupList = data;
        // this.$apply();
    }

    async uploadImage() {
        try {
            const { tempFilePaths } = await wepy.chooseImage({
                count: 1,
            });
            await this.uploadResource(tempFilePaths[0], 'image');
            toast('上传成功');
        } catch (e) {
            this.errorHandler('上传失败', e);
            toast('上传失败');
        }
    }

    async uploadVideo() {
        try {
            const { tempFilePath } = await wepy.chooseVideo();
            await this.uploadResource(tempFilePath, 'video');
            toast('上传成功');
        } catch (e) {
            this.errorHandler('上传失败', e);
            toast('上传失败');
        }
    }

    /**
     * @desc 上传素材
     */
    async uploadResource(path, type) {
        // 上传资源
        const { content: resourceUrl } = await uploader(path, {
            type,
        });

        // 将资源插入到对应资源库
        await get(SAVE_RESOURCE_URL, {
            resourceUrl,
            resourceType: type === 'image' ? 1 : 2,
        });
    }

    showDialog() {
        this.showPop = true;
        this.$apply();
    }
    errorHandler(e) {
        console.log('ERROR:', e);
    }

    onReachBottom() {
        this.loadData(this.curTab);
    }
}
</script>

<style lang="scss">
@import '../css/group.scss';
@import '../css/btn.scss';
$workWidth: 200rpx;
$workHeight: 200rpx;
.container{
    margin-top: 110rpx;
    width:100%;
    height:100%;
}
.tabs-wrap {
    display: table;
    width: 100%;
    background: #fff;
    position: fixed;
    top: 0;
    z-index: 100;
    border-top: 2rpx solid #f3f3f3;
    font-size: 30rpx;
}
.tabs-wrap > .tab-box {
    display: table-cell;
    text-align: center;
    line-height: 88rpx;
    color: #666666;
    &.selected {
        color: #4e88ff;
    }
    &.selected::after {
        display: block;
        content: '';
        width: 60rpx;
        height: 6rpx;
        margin: 0 auto;
        background: #4e88ff;
        border-radius: 42rpx;
    }
}

.work-list {
    background-color: #FFFFFF;
    padding: 45rpx 15rpx 102rpx 45rpx;
    min-height: 1098rpx;

    .content {
        display: flex;
        flex-wrap: wrap;

        .work-box {
            position: relative;

            .work-mask {
                position: absolute;
                top: 0;
                left: 0;
                width: $workWidth;
                height: $workHeight;

                &::after {
                    content: ' ';
                    display: block;
                    background: url('/resource-unchecked.png');
                    background-size: 39rpx 39rpx;
                    width: 39rpx;
                    height: 39rpx;
                    position: absolute;
                    right: 20rpx;
                    bottom: 20rpx;
                }

                &.checked::after {
                    background-image: url('/resource-checked.png');
                }
            }
        }

        .item {
            margin-bottom: 30rpx;
            margin-right: 30rpx;
            width: $workWidth;
            height: $workHeight;
            background-color: #000000;
        }
    }
}
</style>