<template>
<view class="cateselector-container">
    <!-- 选中列宽度扩大：selected -->
    <view class="cateselector first {{columnNo === 1?'selected':''}}">
        <repeat for="{{cateRange[0]}}" key="cateId">
            <view class="cateselector-li {{item.cateId===cateChooice[0].cateId?'selected':''}}"
            @tap="bindFirstCate({{item}})">{{item.name}}<view class="cateselector-li-bottom"></view></view>
        </repeat>
    </view>
    <!-- 选中列宽度扩大：selected -->
    <view class="cateselector second  {{columnNo === 2?'selected':''}}">
        <repeat for="{{cateRange[1]}}" key="cateId">
            <view class="cateselector-li {{item.cateId===cateChooice[1].cateId?'selected':''}}"
            @tap="bindSecondCate({{item}})">{{item.name}}<view class="cateselector-li-bottom"></view></view>
        </repeat>
    </view>
    <view class="cateselector three">
        <repeat for="{{cateRange[2]}}" key="cateId">
            <view class="cateselector-li {{item.cateId===cateChooice[2].cateId?'selected':''}}"
            @tap="bindThreeCate({{item}})">{{item.name}}<view class="cateselector-li-bottom"></view></view>
        </repeat>
    </view>
</view>
</template>
<script>
import wepy from 'wepy';
import { toast } from '../utils';
import { get } from '../utils/ajaxP';

export default class CateSelector extends wepy.page {
    config = { navigationBarTitleText: '选择类目' }
    data = {
        columnNo: 1, // 选中的列宽度加大
        cateChooice: [{}, {}, {}], // 选中类别[cate1,cate2,cate3]
        cateRange: [[], [], []], // 三级类范围值[range1,range2,range3]
    }
    methods = {
        async bindFirstCate (item) {
            const { cateId: parentid } = item;
            // 第一级选中，更新第二级范围值
            const [e, range2] = await this.getRangeById(this.mpId, parentid);
            if (e) {
                toast(e);
                return;
            }
            const [range1] = this.cateRange;
            // 更新选中列
            this.columnNo = 1;
            // 第一级选中则第二级范围更新、第三级范围清空
            this.cateRange = [range1, range2, []];
            // 更新第一级选值并清空第二三级选值
            this.cateChooice = [item, [], []];
            this.$apply();
        },
        async bindSecondCate (item) {
            const { cateId: parentid } = item;
            // 第二级选中则更新第三级范围值
            const [e, range3] = await this.getRangeById(this.mpId, parentid);
            if (e) {
                toast(e);
                return;
            }
            const [chooice1] = this.cateChooice;
            // 更新选中列
            this.columnNo = 2;
            // 第二级选中则更新第三级范围
            this.cateRange.splice(2, 1, range3);
            // 更新第二级选值并清空第三级选值
            this.cateChooice = [chooice1, item, {}];
            this.$apply();
            this.cateRange[2] && this.cateRange[2].length === 0 && wepy.navigateBack();
        },
        bindThreeCate (item) {
            // 更新选中列
            this.columnNo = 3;
            // 更新第三级选值
            this.cateChooice.splice(2, 1, item);
            this.$apply();
            wepy.navigateBack();
        },
    }
    // 初始化选择范围
    onLoad (options) {
        const mpId = wepy.getStorageSync('current_mpid');
        // 已选中的行业ID
        const {
            cate1 = '', cate2 = '', cate3 = '',
        } = options;
        this.initData(mpId, [
            cate1,
            cate2,
            cate3,
        ]);
    }
    // 页面返回时把选择值存入全局
    onUnload () {
        // 关闭选择类目同时存储选择值到全局
        this.$parent.globalData = Object.assign(
            {}, this.$parent.globalData,
            { cateChooice: this.cateChooice },
        );
    }
    getRangeById (mpId, parentid = '') {
        return get('/cate/dispcate/byparentid', { mpid: mpId, parentid });
    }
    getCateById (item, cateId) {
        return `${item.cateId}` === cateId;
    }
    async initData (mpId, cateChooice) {
        // 每次必须拉取第一级范围数据
        const [e, cate1Range] = await this.getRangeById(mpId);
        if (e) {
            toast(e);
            return;
        }
        // 更新第一级范围数据
        this.cateRange.splice(0, 1, cate1Range);
        // 更新第一级选中值
        // 如果选中值为空则取范围中第一条做默认值
        const category1 = cate1Range.find(item => `${item.cateId}` === cateChooice[0]) || cate1Range[0];
        this.cateChooice.splice(0, 1, category1);
        cateChooice.splice(0, 1, category1.cateId);
        // 通过父级选值子级范围数据
        cateChooice.slice(0, 2).map(async (parentId, index) => {
            // CateChooice中子元素下标
            const subIndex = index + 1;
            // 父级未选择中范围中则不能拉取下级范围
            // parentId初始值为代表未选择，RD存的默认值
            if (!parentId || parentId.toString() === '0') return;
            const [e1, range] = await this.getRangeById(mpId, parentId);
            if (e1) {
                toast(e1);
                return;
            }
            // 更新子级范围数据源
            this.cateRange.splice(subIndex, 1, range);
            // 子级范围是否有选中值
            const tempCate = range.find(item => `${item.cateId}` === cateChooice[subIndex]) || '';
            tempCate && this.cateChooice.splice(subIndex, 1, tempCate);
            this.$apply();
        });
        this.mpId = mpId;
        this.$apply();
    }
}
</script>

<style lang="scss">
.cateselector-container {
    border-top: 2rpx solid #f3f3f3;
    display: flex;
    box-shadow: 0 0 40rpx 1024rpx;
    .cateselector {
        height: 100vh;
        overflow-y: scroll;
        .cateselector-li {
            position: relative;
            line-height: 88rpx;
            overflow: hidden;
            white-space: nowrap;
            background: #fbfbfb;
            text-indent: 30rpx;
            font-family: PingFangSC-Regular;
            font-size: 28rpx;
            color: #333333;
            letter-spacing: 0;
            &.selected {
                background: #3a87ff;
                color: #ffffff;
                .cateselector-li-bottom {
                    display: none;
                }
            }
            .cateselector-li-bottom {
                position: absolute;
                bottom: 0rpx;
                left: 20rpx;
                height: 2rpx;
                display: block;
                width: 100%;
                box-sizing: border-box;
                padding-left: 30rpx;
                background: #f3f3f3;
            }
        }
        &.first {
            width: 152rpx;
            // background: #fbfbfb;
        }
        &.second {
            width: 206rpx;
            // background: #f6f6f6;
        }
        &.three {
            // background: #fff;
            flex: 1;
        }
        &.selected {
            width: 300rpx;
        }
    }
}
</style>
