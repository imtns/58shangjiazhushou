<template>
    <view class="chatMessages" wx:if="{{userLogin}}">
        <repeat wx:if="{{isEmpty === 2}}" for="{{contactList}}" key="{{index}}" index="index" item="item">
            <view class="message_box"  @tap="toChat" data-item="{{item}}">
                <view class="message_header" style="background:url({{item.portrait || 'http://pic1.58cdn.com.cn/bizmp/n_v285d6a16d725a446694db35df23c9db24.png?=690'}}) no-repeat center">
                    <view class="message_tips" wx:if="{{item.unReadCount > 0}}">{{item.unReadCount}}</view>
                </view>
                <view class="message_info">
                    <view class="chat_name">{{item.nickName}}</view>
                    <view class="chat_info">{{item.content}}</view>
                    <view class="chat_time">{{item.sendTime}}</view>
                </view>
            </view>
        </repeat>
        <view wx:if="{{isEmpty === 1}}">
            <view class="empty-wrap">
                <image class="img-no-data" src="https://static.58.com/lbg/shangjiaxcxht/zhushou/img/chatMessages_empty.png"/>
                <view class="txt-no-data">暂时没有聊天消息哦</view>
                <view class="txt-no-data second">去分享名片可获得更多商机</view>
            </view>
        </view>  
    </view>
    <view wx:else="{{!userLogin}}">
        <nologin></nologin>
    </view>
</template>

<script>
import wepy from 'wepy';
import NoLogin from '../components/NoLogin';
import { post } from '../utils/ajax';
import Mixin from '../mixin';
import { globalData, setTabBar } from '../utils/globalData';
import { pubsub } from '../utils/IM/pubsub';
import { formatDateTimeLocal } from '../utils/dateFomate';
import { CHAT_CONTACT_LIST } from '../utils/url';
import { SendClickLog } from '../utils/maidian';

const newMsgToken = [];
export default class chatMessages extends wepy.page {
    mixins = [Mixin]
    config = {
        navigationBarTitleText: '消息',
    }
    data = {
        contactList: [],
        isEmpty: 3,
        userLogin: true,
    }
    components = {
        nologin: NoLogin,
    }
    methods = {
        toChat(e) {
            SendClickLog('sjzh_click_chatMessages_toChat');
            const { contactId, nickName, unReadCount } = e.currentTarget.dataset.item;
            const { unReadCount: totalCount } = globalData.chat;
            if (unReadCount) {
                const text = totalCount - unReadCount;
                setTabBar(text);
            }
            const url = `../packageChat/wechat/chat?contact=${contactId}&nickName=${nickName}`;
            wepy.navigateTo({
                url,
            });
        },
    }
    onLoad () {
        SendClickLog('sjzh_click_chatMessages_onload');
        console.log('onload');
    }
    async onShow () {
        if (!globalData.userLogin) {
            this.userLogin = false;
            this.$apply();
            return;
        }
        await this.requestContactList();
        await this.unreadMsgs();
        const { unReadCount } = globalData.chat;
        setTabBar(unReadCount);
    }
    onHide() {
        newMsgToken.map((tempToken) => {
            pubsub.unsubscribe(tempToken);
            return tempToken;
        });
    }
    unreadMsgs () {
        const { contactList } = this;
        contactList.forEach((item) => {
            const tempToken = pubsub.subscribe(item.contactId, (...props) => {
                const {
                    type,
                    content,
                    sendTime: lastSendTime = '',
                } = props[0];
                let count;
                const {
                    unReadCount,
                } = item;
                if (unReadCount === 0 || unReadCount === '0') {
                    count = 1;
                } else {
                    count = Number(unReadCount) + 1;
                }
                const unReadCountMsg = `${count >= 100 ? '...' : ''}${count > 0 && count < 100 ? count : ''}`;
                console.log(unReadCount, unReadCountMsg);
                item.type = type;
                item.content = type === 1 ? '[图片]' : content;
                item.sendTime = formatDateTimeLocal(lastSendTime);
                item.unReadCount = unReadCountMsg;
                item.unReadCountMsg = unReadCountMsg;
                contactList.forEach((msg, j) => {
                    if (msg.contactId === item.contactId) {
                        // i = j;
                        contactList.splice(j, 1);
                        contactList.unshift(item);
                        this.contactList = contactList;
                        this.$apply();
                    }
                    return msg;
                });
                return item;
            });
            newMsgToken.push(tempToken);
        });
    }
    async requestContactList() {
        const { token } = globalData.chat;
        const { data } = await post(CHAT_CONTACT_LIST, { token });
        if (!data.length) {
            this.isEmpty = 1;
            this.$apply();
            return;
        }
        this.isEmpty = 2;
        this.$apply();
        const contactList = data.map((item) => {
            const {
                unReadCount,
                recentMsgs,
                id,
                portrait,
                nickName,
            } = item;
            const lastMsg = recentMsgs && recentMsgs.length > 0 ? recentMsgs[recentMsgs.length - 1] : {};
            const {
                content: lastContent = '',
                type: lastType = '',
                sendTime: lastSendTime = '',
            } = lastMsg;
            // 未读消息数特殊处理：超过两位数显示...
            const unReadCountMsg = `${unReadCount >= 100 ? '...' : ''}${unReadCount > 0 && unReadCount < 100 ? unReadCount : ''}`;
            const nItem = {
                contactId: id || '', // 联系人Id
                portrait: `${portrait.indexOf('http') === -1 ? 'https://pic1.58cdn.com.cn' : ''}${portrait}`, // 联系人头像
                nickName: nickName || '', // 联系人昵称
                unReadCount: unReadCountMsg, // 未读消息数，超过两位数显示...
                sendTime: formatDateTimeLocal(lastSendTime), // 最后发送时间，格式化: 当天只展示时分，非当天且在当年 显示月天，非当年 显示年月日；
                content: lastType === 1 ? '[图片]' : lastContent, // 最后发送内容 ,type =0 文本 type=1图片
            };
            return nItem;
        });
        this.contactList = contactList;
        this.$apply();
    }
}
</script>

<style lang="scss">
.chatMessages{
    .img-no-data {
        display: block;
        width: 180rpx;
        height: 180rpx;
        margin: 200rpx auto 20rpx;
    }
    .txt-no-data {
        line-height: 88rpx;
        text-align: center;
        font-size: 30rpx;
        color: #ccc;
    }
    .second{
        line-height: 10rpx;
    }
    .message_box{
        padding: 35rpx 30rpx;
        background: white;
        height: 160rpx;
        width: 100%;
        display: flex;
        flex-direction: row;
        border: 1rpx solid #F3F3F3;
        border-left: 0;
        border-right: 0;
        border-top: 0;
        .message_header{
            width: 90rpx;
            height: 90rpx;
            background-size: contain !important;
            border-radius: 100%;
            position: relative;
            .message_tips{
                position: absolute;
                width: 36rpx;
                height: 36rpx;
                top: -10rpx;
                right: -12rpx;
                background: #FF552E;
                line-height: 36rpx;
                font-size: 20rpx;
                color: #FFFFFF;
                border-radius: 100%;
                text-align: center;
            }
        }
        .message_info{
            flex: 1;
            padding-left: 30rpx;
            position: relative;
            overflow: hidden;
            .chat_name{
                font-size: 34rpx;
                color: #000000;
                line-height: 55rpx;
            }
            .chat_info{
                font-size: 28rpx;
                color: #A8A8A8;
                overflow: hidden;
                text-overflow:ellipsis;
                white-space: nowrap;
            }
            .chat_time{
                position: absolute;
                top: 0;
                right: 0;
                font-size: 24rpx;
                color: #999999;
            }
        }
    }
}
</style>