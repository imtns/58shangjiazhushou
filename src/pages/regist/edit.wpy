<template lang="wxml">
    <view class="container">
        <messageBox
            :show.sync="modalShow"
            :content.sync="modalContent"
            :confirmText.sync="modalConfirmText"></messageBox>
        <form @submit="handleSubmit" report-submit>
            <view class="header">
                <view>注册基本信息</view>
                <view class="help" @tap="handleShowHelp">?</view>
            </view>
            <view class="form">
                <view class="form-item logo" @tap="handleUploadLogo">
                    <text class="label">上传小程序标志</text>
                    <image class="logo" mode="aspectFill"
                        src="{{ form.avatarUrl ? form.avatarUrl + '?w=72&h=72&ss=1' : '' }}"></image>
                    <text class="arrow"></text>
                </view>
                <view
                    class="form-item"
                    @tap="handleSelectCate">
                    <view class="label">所属行业</view>
                    <view class="selector">
                        <block wx:if="{{ form.wubaSecondName }}">
                            {{ (form.wubaFirstName || '') + ' ' + (form.wubaSecondName || '') }}
                        </block>
                        <block wx:else>
                            <text class="placeholder">请选择</text>
                        </block>
                    </view>
                    <text class="arrow"></text>
                </view>
                <view class="form-item">
                    <view class="label">小程序名称</view>
                    <input
                        @input="handleInput('nickName')"
                        class="input" type="text"
                        maxlength="20" placeholder-class="placeholder"
                        placeholder="请输入" value="{{ form.nickName }}"
                        disabled="{{ block.nickName }}"/>
                </view>
                <view class="form-text-item">小程序名称提交后不可修改，请谨慎写</view>
                <view class="form-item column">
                    <view class="label">小程序功能介绍</view>
                    <textarea
                        class="textarea"
                        maxlength="100"
                        @input="handleInput('signature')"
                        placeholder="请输入"
                        placeholder-class="placeholder"
                        value="{{ form.signature }}"
                        disabled="{{ block.signature }}">
                        <view class="textarea-num">{{signatureNum}}/100</view>
                    </textarea>
                </view>
                <view class="form-text-item">请确认介绍内容不含国家相关法律禁止内容</view>
                <button class="btn-save" form-type="submit">提交</button>
            </view>
        </form>
        <helpModal
            :show.sync="helpModalShow">
            <view slot="content">
                <view class="notice-item">
                    <view class="notice-item-title">小程序名称规则（提交后不可修改）：</view>
                    <view class="notice-item-content">
                        <text>1）小程序名称可以由中文、数字、英文。长度在4-30个字符之间，一个中文字等于2个字符。\n</text>
                        <text>2）公众号、小程序在微信公众平台上的名称是唯一的，且属于同一主体下，可以重名。\n</text>
                        <text>3）不得与不同主体的公众号名称重名。</text>
                    </view>
                </view>
                <view class="notice-item">
                    <view class="notice-item-title">小程序头像：</view>
                    <view class="notice-item-content">
                        <text>1. 新头像不允许涉及政治敏感与色情;\n</text>
                        <text>2. 图片格式必须为：png,bmp,jpeg,jpg,gif；不可大于2M；建议使用png格式图片，以保持最佳效果；建议图片尺寸为144px*144px</text>
                    </view>
                </view>
                <view class="notice-item">
                    <view class="notice-item-content">
                        <text>小程序所属行业必须为规定行业</text>
                    </view>
                </view>
            </view>
        </helpModal>
    </view>
</template>

<script>
import wepy from 'wepy';
import HelpModal from '../../components/HelpModal';
import { picSrcDomain, getNetStatus, toast } from '../../utils/index';
import uploadImages from '../../utils/upload';
import { SAVE_MPINFO } from '../../utils/url';
import { post } from '../../utils/ajax';
import globalService from '../../utils/globalService';
import RegistMixin from './mixin';
import MessageBox from '../../components/MessageBox';

export default class Index extends wepy.page {
    mixins = [RegistMixin]
    config = {
        navigationBarTitleText: '创建小程序',
    }
    data = {
        helpModalShow: false,

        form: {
            nickName: '', // 小程序名称
            // 行业选择
            wubaFirstId: null,
            wubaSecondId: null,
            wechatFirstId: null,
            wechatSecondId: null,
            wubaFirstName: '',
            wubaSecondName: '',
            avatarUrl: '', // 头像地址
            signature: '', // 简介
        },

        // 控制字段是否可以更改
        block: {
            avatarUrl: false,
            wubaSecondName: false, // 用第二分类名标识
            nickName: false,
            signature: false,
        },

        signatureNum: 0,

        modalShow: false,
        modalContent: '',
        modalConfirmText: '好的',
    }
    components = {
        messageBox: MessageBox,
        helpModal: HelpModal,
    }
    onShow() {
        const cate = globalService.get('multiSelector');
        if (cate) {
            const {
                wubaFirstId,
                wubaSecondId,
                wechatFirstId,
                wechatSecondId,
                wubaFirstName,
                wubaSecondName,
            } = cate;
            Object.assign(this.form, {
                wubaFirstId,
                wubaSecondId,
                wechatFirstId,
                wechatSecondId,
                wubaFirstName,
                wubaSecondName,
            });
        }
    }

    validator(data) {
        const { nickName } = data;
        const strArr = nickName.split('');
        const fields = ['nickName', 'wubaFirstId', 'wubaSecondId',
            'wechatFirstId', 'wechatSecondId', 'avatarUrl'];
        let len = 0;

        for (let i = 0; i < strArr.length; i += 1) {
            const v = strArr[i];
            if (!/[\u4e00-\u9fa5_a-zA-Z0-9_]/.test(v)) {
                return { msg: '只能包含英文、数字和中文' };
            }

            if (/[a-zA-Z0-9]/.test(v)) {
                len += 1;
            } else {
                len += 2;
            }
        }

        if (len > 30) {
            return { msg: '小程序名称不能大于30个字符' };
        }

        if (len < 4) {
            return { msg: '小程序名称不能小于4个字符' };
        }

        for (let i = 0; i < fields.length; i += 1) {
            if (!data[fields[i]]) {
                return { msg: '请填写完整信息' };
            }
        }

        return { msg: '' };
    }

    /**
     * 处理小程序信息部分填写错误
     *
     * @line {number} 从第几行开始要重新填写
     */
    resolvePartError(line) {
        const lines = [
            'avatarUrl',
            'wubaFirstName',
            'wubaSecondName',
            'nickName',
            'signature',
        ];

        if (line > lines.length + 1) {
            return;
        }

        // 若大于3行，多加1，跳过所属行业的两个字段
        if (line >= 3) {
            line += 1;
        }

        // 清空需要充填的值
        for (let i = line - 1; i < lines.length; i += 1) {
            const k = lines[i];
            this.form[k] = '';
        }

        // 锁定不能填写的值
        const blocks = [
            'avatarUrl',
            'wubaSecondName', // 用第二分类名标识
            'nickName',
            'signature',
        ];
        blocks.forEach((k, i) => {
            if (i < line - 1) {
                this.block[k] = true;
            }
        });

        this.$apply();
    }

    methods = {
        handleSelectCate() {
            if (this.block.wubaSecondName) {
                return;
            }

            wepy.navigateTo({
                url: '/pages/multiSelector?type=registCate',
            });
        },
        handleInput(prop, e) {
            const { value } = e.detail;

            // 简介计算长度用于显示
            if (prop === 'signature') {
                this.signatureNum = value.length;
            }

            this.form[prop] = value;
        },
        async handleSubmit(e) {
            try {
                const { formId } = e.detail;
                const {
                    nickName,
                    avatarUrl,
                    signature,

                    wubaFirstId,
                    wubaSecondId,
                    wechatFirstId,
                    wechatSecondId,
                    wubaFirstName,
                    wubaSecondName,
                } = this.form;

                const postData = {
                    nickName,
                    avatarUrl,
                    signature,

                    wubaFirstId,
                    wubaSecondId,
                    wechatFirstId,
                    wechatSecondId,
                    wubaFirstName,
                    wubaSecondName,

                    formId,
                };

                const { msg } = this.validator(postData);

                if (msg) {
                    this.showModal(msg);
                    return;
                }

                const { state, data: resData, msg: resMsg } = await post(SAVE_MPINFO, postData);

                if (state === 99999) {
                    // 修改小程序信息部分失败，需要重新填写
                    // data 返回一个数字，代表从第几个开始以下都需要重新填写
                    this.resolvePartError(resData);
                    this.showModal(resMsg);
                    return;
                }

                await toast('创建成功！');
                wepy.switchTab({ url: '/pages/home' });
            } catch (err) {
                this.showModal(err);
                console.log(err);
            }
        },
        handleShowHelp() {
            this.helpModalShow = true;
        },
        async handleUploadLogo() {
            try {
                if (this.block.avatarUrl) {
                    return;
                }

                const netStatus = await getNetStatus();

                if (netStatus === 0) {
                    toast('无网络');
                    return;
                }

                const { msg, result, tempFilePaths } = await uploadImages({
                    count: 1,
                    maxSize: 2000 * 1024,
                });

                console.log(msg, result, tempFilePaths);
                if (msg) {
                    console.log(msg);
                    return;
                }
                this.form.avatarUrl = picSrcDomain() + result[0];
                this.$apply();
            } catch (e) {
                console.log(e);
            }
        },
    }
}
</script>

<style lang="scss">
    .header {
        padding: 20rpx 30rpx;
        display: flex;
        justify-content: space-between;
        align-items: center;
        font-size: 28rpx;
        color: #999;
        .help {
            width: 36rpx;
            height: 36rpx;
            background-color: #4E88FF;
            border-radius: 50%;
            text-align: center;
            line-height: 36rpx;
            color: #fff;
        }
    }
    .form-item {
        padding: 24rpx 30rpx;
        color: #999;
        font-size: 30rpx;
        line-height: 42rpx;
        display: flex;
        justify-content: space-between;
        align-items: center;
        border-bottom: 1rpx solid #f3f3f3;
        background-color: #fff;
        &.last {
            border: none;
        }
        &.column {
            flex-direction: column;
            align-items: flex-start;
        }

        .input {
            width: 396rpx;
            color: #333;
            text-align: right;
            height: 42rpx;
            min-height: auto;
        }
        .textarea {
            width: 100%;
            margin-top: 15rpx;
            box-sizing: border-box;
            position: relative;
            height: 200rpx;
        }
        .selector {
            margin-right: 20rpx;
            width: 398rpx;
            color: #333;
            text-align: right;
            flex-grow: 1;
        }
        .selector.placeholder {
            color: #ccc;
        }
        .arrow {
            display: block;
            content: '';
            width: 15rpx;
            height: 25rpx;
            background: url('https://static.58.com/lbg/mengchong/image/icon/arrow-right.png')
                no-repeat;
            background-size: 100%;
        }
        .logo {
            width: 72rpx;
            height: 72rpx;
            border-radius: 50%;
            margin: 0 20rpx 0 auto;
            background-color: #f3f3f3;
        }
    }
    .form-item.logo {
        border: none;
        margin-bottom: 20rpx;
    }
    .form-text-item {
        font-size: 28rpx;
        line-height: 40rpx;
        color: #999;
        padding: 10rpx 30rpx;
        margin-bottom: 30rpx;
    }
    .btn-save {
        position: fixed;
        width: 100%;
        bottom: 0;
        background-color: #4E88FF;
        color: #fff;
        line-height: 102rpx;
        border-radius: 0;
        &.disabled {
            background-color: #DBDBDB;
        }
    }

    .notice-item {
        margin-bottom: 40rpx;
    }
    .notice-item-title {
        font-size: 28rpx;
        color: #2a2a2a;
        font-weight: bold;
    }
    .placeholder {
        color: #ccc;
    }

    .textarea-num {
        position: absolute;
        right: 0rpx;
        bottom: 0rpx;
    }
</style>